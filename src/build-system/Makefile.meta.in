#################################
# $Id: Makefile.meta.in 257950 2011-03-16 18:40:24Z ucko $
# Author:  Denis Vakatov (vakatov@ncbi.nlm.nih.gov)
#################################
# Meta-makefile(to be configured into "Makefile")
# This can be used to build/install/clean [*_PROJ] makefiles
# in current directory and in the below [SUB_PROJ] directories.
#
# LIB_PROJ = pl1 pl2 ...  // Makefile.pl1.lib Makefile.pl2.lib ...
# APP_PROJ = pa1 pa2 ...  // Makefile.pa1.app Makefile.pa2.app ...
# USR_PROJ = pu1 pu2 ...  // Makefile.pu1 Makefile.pu2 ...
# SUB_PROJ = app sub_proj1 sub_proj2
#
# srcdir = @srcdir@
# include @builddir@/Makefile.meta
#################################

builddir = @builddir@
build_root = @build_root@
top_srcdir = @top_srcdir@
abs_top_srcdir = @abs_top_srcdir@
rel_srcdir = $(srcdir:$(top_srcdir)/%=%)
abs_srcdir = $(srcdir:$(top_srcdir)/%=$(abs_top_srcdir)/%)
status_dir = @status_dir@

### Make sure we are using a right command shell

@make_shell@

### Protect against two MAKE processes running in the same dir

RWL = $(abs_top_srcdir)/scripts/common/impl/run_with_lock.sh

### Tests config variables

check_run = $(abs_top_srcdir)/scripts/common/check/check_run.sh
check_add = $(abs_top_srcdir)/scripts/common/check/check_add.sh

### One-level build -- [USR_PROJ] makefiles

NOTK_BRA = test "$$expendable" = true || case "$(MFLAGS)" in *k*) ;; *)
NOTK_KET = ;; esac

# Non-redundant flags (will be overridden for GNU Make to avoid
# --jobserver-fds=* proliferation)
MFLAGS_NR = $(MFLAGS)

include $(top_srcdir)/src/build-system/Makefile.is_gmake
include $(top_srcdir)/src/build-system/Makefile.meta.$(is_gmake)

deactivate = unlink
@IF_DEACTIVATING@ deactivate = deactivate

# Factored out merely to avoid duplication
MAKE_USR = $(MAKE) -f "$$x_mfile" builddir="$(builddir)" srcdir="$(abs_srcdir)" $(MFLAGS_NR)
USRP_BRA = \
+if test ! -z "$(USR_PROJ)"  ||  test ! -z "@UNIX_USR_PROJ@" \
	|| test ! -z "$(EXPENDABLE_USR_PROJ)" ; then \
   x_project="$(USR_PROJ) @UNIX_USR_PROJ@ - $(EXPENDABLE_USR_PROJ)" ; \
   expendable=false ; \
   test -f requirements  ||  touch -t 197607040000 requirements ; \
   for i in $$x_project ; do \
      if test "x$$i" = "x-" ; then \
         expendable=true ; \
         NCBI_BUT_EXPENDABLE=' (but expendable)' ; \
         continue ; \
      fi ; \
      if test -f "Makefile.$$i" ; then \
         x_mfile="Makefile.$$i" ; \
      else \
         x_mfile="$(srcdir)/Makefile.$$i" ; \
      fi ; \
      if NCBICXX_TESTING_REQS=1 $(MAKE_USR) -q requirements ; then \
         $(RWL) -base "make_$$i" -log "make_$$i.log" $(MAKE_USR)
USRP_KET = || $(NOTK_BRA) echo "FAILED$$NCBI_BUT_EXPENDABLE: $(rel_srcdir)/Makefile.$$i" ; \
              exit 1 $(NOTK_KET) ; \
      else \
         echo "NOTE:  skipping project \"$$i\" due to unmet requirements"; \
      fi; \
   done ; \
   test -s requirements  ||  rm -f requirements ; \
fi

MAKE_ASN = $(builddir)/new_module.sh "$$i"
ASNP_BRA = \
+if test ! -z "$(ASN_PROJ)" ; then \
   here=`pwd` ; \
   x_project="$(ASN_PROJ)" ; \
   for i in $$x_project ; do \
      (cd $(abs_srcdir) \
       && MAKE="$(MAKE) $(MFLAGS_NR)" \
          $(RWL) -base make_asn -log "$$here/make_$$i.log" $(MAKE_ASN)
ASNP_KET = && $(MAKE_LIB) src-stamp) \
           || $(NOTK_BRA) echo "FAILED$$NCBI_BUT_EXPENDABLE: $(rel_srcdir)/Makefile.$$i.lib" ; \
                exit 6 $(NOTK_KET) ; \
   done ; \
fi

MAKE_DTD = $(builddir)/new_module.sh --dtd "$$i"
DTDP_BRA = \
+if test ! -z "$(DTD_PROJ)" ; then \
   here=`pwd` ; \
   x_project="$(DTD_PROJ)" ; \
   for i in $$x_project ; do \
      (cd $(abs_srcdir) \
       && MAKE="$(MAKE) $(MFLAGS_NR)" \
          $(RWL) -base make_asn -log "$$here/make_$$i.log" $(MAKE_DTD)
DTDP_KET = $(ASNP_KET)

MAKE_XSD = $(builddir)/new_module.sh --xsd "$$i"
XSDP_BRA = \
+if test ! -z "$(XSD_PROJ)" ; then \
   here=`pwd` ; \
   x_project="$(XSD_PROJ)" ; \
   for i in $$x_project ; do \
      (cd $(abs_srcdir) \
       && MAKE="$(MAKE) $(MFLAGS_NR)" \
          $(RWL) -base make_asn -log "$$here/make_$$i.log" $(MAKE_XSD)
XSDP_KET = $(ASNP_KET)

# If you change this rule, please continue to honor external
# definitions of $(MAKE_LIB).
MAKE_LIB = $(MAKE) -f "$(builddir)/Makefile.lib.tmpl" srcdir="$(srcdir)" TMPL="$$i" $(MFLAGS_NR)
LIBP_BRA = \
+if test ! -z "$(LIB_PROJ)$(EXPENDABLE_LIB_PROJ)$(ASN_PROJ)$(DTD_PROJ)$(XSD_PROJ)"; then \
   case "$(LIB_PROJ): $(ASN_PROJ) $(DTD_PROJ) $(XSD_PROJ) " in \
     ?*:*" $(LIB_PROJ) "* ) x_project="$(LIB_PROJ)" ;; \
     * ) x_project="$(ASN_PROJ) $(DTD_PROJ) $(XSD_PROJ) $(LIB_PROJ)" ;; \
   esac ; \
   x_project="$$x_project - $(EXPENDABLE_LIB_PROJ)" ; \
   expendable=false ; \
   for i in $$x_project ; do \
     if test "x$$i" = "x-" ; then \
        expendable=true ; \
        NCBI_BUT_EXPENDABLE=' (but expendable)' ; \
        continue ; \
     fi ; \
     if NCBICXX_TESTING_REQS=1 $(MAKE_LIB) -q requirements ; then \
        $(RWL) -base "make_$$i" -log "make_$$i.log" -map $(srcdir)/.\#lock-map \
           $(MAKE_LIB)
LIBP_KET = && continue ; \
        $(MAKE_LIB) $(deactivate) ; \
        $(NOTK_BRA) echo "FAILED$$NCBI_BUT_EXPENDABLE: $(rel_srcdir)/Makefile.$$i.lib" ; \
        exit 2 $(NOTK_KET) ; \
     else \
       echo "NOTE:  skipping project \"$$i\" due to unmet requirements"; \
     fi; \
   done ; \
fi

# If you change this rule, please continue to honor external
# definitions of $(MAKE_APP).
MAKE_APP = $(MAKE) -f "$(builddir)/Makefile.app.tmpl" srcdir="$(srcdir)" TMPL="$$i" @APP_NOCOPY@ $(MFLAGS_NR)
APPP_BRA = \
+if test ! -z "$(APP_PROJ)"  -o  ! -z "$(EXPENDABLE_APP_PROJ)" ; then \
   x_project="$(APP_PROJ) - $(EXPENDABLE_APP_PROJ)" ; \
   expendable=false ; \
   test -f requirements  ||  touch -t 197607040000 requirements ; \
   for i in $$x_project ; do \
     if test "x$$i" = "x-" ; then \
        expendable=true ; \
        NCBI_BUT_EXPENDABLE=' (but expendable)' ; \
        continue ; \
     fi ; \
     if NCBICXX_TESTING_REQS=1 $(MAKE_APP) -q requirements ; then \
        $(RWL) -base "make_$$i" -log "make_$$i.log" -map $(srcdir)/.\#lock-map \
           $(MAKE_APP)
APPP_KET = && continue ; \
        $(MAKE_APP) unlink ; \
        $(NOTK_BRA) echo "FAILED$$NCBI_BUT_EXPENDABLE: $(rel_srcdir)/Makefile.$$i.app" ; \
        exit 3 $(NOTK_KET) ; \
     else \
       echo "NOTE:  skipping project \"$$i\" due to unmet requirements"; \
     fi; \
   done ; \
   test -s requirements  ||  rm -f requirements ; \
fi

CHECK_BRA = \
+if test -f "$(check_run)"; then \
  $(check_run) @signature@ $(builddir) $(abs_top_srcdir) $(MAKE) $(MFLAGS_NR) IS_CHECK=Y
CHECK_KET = ||  exit 7 ; \
fi

CHECK_ADD_BRA = \
if test ! -z "$(APP_PROJ)"  -o  ! -z "$(EXPENDABLE_APP_PROJ)" ; then \
   x_project="$(APP_PROJ) - $(EXPENDABLE_APP_PROJ)" ; \
   expendable=false ; \
   for i in $$x_project ; do \
      if test "x$$i" = "x-" ; then expendable=true ; continue ; fi ; \
      $(check_add) $(abs_srcdir) $$i @signature@ @exe_ext@
CHECK_ADD_KET = ||  exit 5 ; \
   done ; \
fi


all:       all.needs-reqs
clean:     clean.needs-reqs
libs:      libs.needs-reqs
purge:     purge.needs-reqs
check:     check.needs-reqs
check_add: check_add.needs-reqs

MAKE_LOCK_MAP = $(RWL) $(top_srcdir)/scripts/common/impl/make_lock_map.sh

sources: configurables
	@$(RWL) $(MAKE) $(MFLAGS_NR) sources.usr
	@$(MAKE) $(MFLAGS_NR) sources.nonusr
all.usr sources.usr: configurables
	@-rm -f .built .built_r
	@-echo "`date`: starting to build in `pwd`" > .building
	@$(USRP_BRA) all   $(USRP_KET)
	@-rm -f .building
	@-echo "`date`: local build succeeded in `pwd`" > .built
sources.nonusr:
	@$(ASNP_BRA) all   $(ASNP_KET)
	@$(DTDP_BRA) all   $(DTDP_KET)
	@$(XSDP_BRA) all   $(XSDP_KET)
	@$(LIBP_BRA) export-headers $(LIBP_KET)

all.real:
	@$(MAKE) $(MFLAGS_NR) all.usr
	@$(MAKE) $(MFLAGS_NR) all.nonusr
all.nonusr: sources.nonusr
	@-rm -f .built .built_r
	@-echo "`date`: starting to build in `pwd`" > .building
	@cd $(abs_srcdir)  &&  $(MAKE_LOCK_MAP)
	@$(LIBP_BRA) all   $(LIBP_KET)
	@$(APPP_BRA) all   $(APPP_KET)
	@-rm -f .building
	@-echo "`date`: local build succeeded in `pwd`" > .built

clean.real:
	@$(RWL) $(MAKE) $(MFLAGS_NR) clean.usr
	@$(MAKE) $(MFLAGS_NR) clean.nonusr
clean.usr:
	@-rm -f .building .built .built_r
	@$(USRP_BRA) clean $(USRP_KET)
clean.nonusr: # clean_sources
	@-rm -f .building .built .built_r
	@cd $(abs_srcdir)  &&  $(MAKE_LOCK_MAP)
	@$(LIBP_BRA) clean $(LIBP_KET)
	@$(APPP_BRA) clean $(APPP_KET)
clean_sources:
	@$(ASNP_BRA) clean_sources $(ASNP_KET)
	@$(DTDP_BRA) clean_sources $(DTDP_KET)
	@$(XSDP_BRA) clean_sources $(XSDP_KET)

purge.real:
	@$(RWL) $(MAKE) $(MFLAGS_NR) purge.usr
	@$(MAKE) $(MFLAGS_NR) purge.nonusr
purge.usr:
	@-rm -f .building .built .built_r
	@$(USRP_BRA) purge $(USRP_KET)
purge.nonusr: # purge_sources
	@-rm -f .building .built .built_r
	@cd $(abs_srcdir)  &&  $(MAKE_LOCK_MAP)
	@$(LIBP_BRA) purge $(LIBP_KET)
	@$(APPP_BRA) purge $(APPP_KET)
purge_sources:
	@$(ASNP_BRA) purge_sources $(ASNP_KET)
	@$(DTDP_BRA) purge_sources $(DTDP_KET)
	@$(XSDP_BRA) purge_sources $(XSDP_KET)

libs.real: sources
	@$(LIBP_BRA) all   $(LIBP_KET)
check.real:
	@$(CHECK_BRA) check_add $(CHECK_KET)
check_add.real:
	@$(CHECK_ADD_BRA)  $(CHECK_ADD_KET)

reqs = $(REQUIRES:%=$(status_dir)/%.enabled)
requirements: $(reqs)

%.needs-reqs:
	@+skip=false ; \
	x_reqs="$(reqs)" ; \
	for f in $$x_reqs ;  do \
	  if test ! -f "$$f" ; then \
	    if test $$skip = false ; then \
	      echo "NOTE:  Skipping project \"`basename \`pwd\``\" due to unmet requirements:" ; \
	      skip=true ; \
	    fi ; \
	    basename "$$f" .enabled ; \
	  fi ; \
	done ; \
	case "$*:$$skip" in \
	    *:true ) ;; \
	    check* ) $(RWL) -base $* $(MAKE) $(MFLAGS_NR) $*.real ;; \
	    *_?:*  ) $(MAKE) $(MFLAGS_NR) $*.real ;; \
	    *      ) $(RWL) $(MAKE) $(MFLAGS_NR) $*.usr  && \
	             $(MAKE) $(MFLAGS_NR) $*.nonusr \
	                 APP_PROJ='$(APP_PROJ)' LIB_PROJ='$(LIB_PROJ)' \
	                 EXPENDABLE_APP_PROJ='$(EXPENDABLE_APP_PROJ)' \
	                 EXPENDABLE_LIB_PROJ='$(EXPENDABLE_LIB_PROJ)' \
	                 ASN_PROJ='$(ASN_PROJ)' DTD_PROJ='$(DTD_PROJ)' \
	                 XSD_PROJ='$(XSD_PROJ)' ;; \
	esac

### Recursive build -- in the [SUB_PROJ] directories

SUB_BRA = \
+if test ! -z "$(SUB_PROJ)"  -o  ! -z "$(EXPENDABLE_SUB_PROJ)" ; then \
    x_subproj="$(SUB_PROJ) - $(EXPENDABLE_SUB_PROJ)" ; \
    expendable=false ; \
    for i in $$x_subproj ; do \
        if test "x$$i" = "x-" ; then \
           expendable=true ; \
           NCBI_BUT_EXPENDABLE=' (but expendable)' ; \
           export NCBI_BUT_EXPENDABLE ; \
           continue ; \
        fi ; \
        if test "x$(IS_CHECK)" = "xY"  -a  "x$$i" = "xcheck" ; then \
            continue ; \
        fi ; \
        ( if test -d $$i ; then \
          cd $$i  &&  $(MAKE) $(MFLAGS_NR)

SUB_KET = || $(NOTK_BRA) exit 4 $(NOTK_KET) ; \
        else \
          echo "Warning:  non-existent sub-project \"$$i\"" ; \
        fi ) || $(NOTK_BRA)  exit 5 $(NOTK_KET) ; \
    done ; \
fi

all_r:       all_r.needs-reqs
clean_r:     clean_r.needs-reqs
purge_r:     purge_r.needs-reqs
check_r:     check_r.needs-reqs
check_add_r: check_add_r.needs-reqs
libs_r:      libs_r.needs-reqs

all_r.real: all.real
	@-rm -f .built_r
	@-echo "`date`: building in subdirectories of `pwd`" > .building
	@$(SUB_BRA) all_r   $(SUB_KET)
	@-rm -f .building
	@-echo "`date`: recursive build succeeded in `pwd`" > .built_r
clean_r.real: clean.real
	@$(SUB_BRA) clean_r $(SUB_KET)
purge_r.real: purge.real
	@$(SUB_BRA) purge_r $(SUB_KET)
check_r.real:
	@$(CHECK_BRA) check_add_r $(CHECK_KET)
check_add_r.real: check_add.real
	@$(SUB_BRA) check_add_r $(SUB_KET)
libs_r.real: libs.real
	@$(SUB_BRA) libs_r $(SUB_KET)


CPP       = @CPP@
LN_S      = @LN_S@
# File listing relevant project directories.
PROJECTS_ = @PROJECTS@
# Preprocessed version.
PROJECTS  = $(builddir)/projects.pseudo.i

# Some preprocessors only accept files with appropriate extensions....
$(builddir)/projects.pseudo.c: $(PROJECTS_)
	rm -f $@
	if test -r "$(PROJECTS_)"; then \
	    $(LN_S) "$(PROJECTS_)" $@; \
	else \
	    echo ".*" > $@; \
	fi

$(PROJECTS): $(builddir)/projects.pseudo.c
	$(CPP) -I`dirname $(PROJECTS_)` -I$(top_srcdir)/scripts/projects \
	    -I$(top_srcdir)/scripts/internal/projects \
            $(builddir)/projects.pseudo.c | sed -e '/#/d' > $@

# This file contains the actual patterns to grep for, formed by
# prepending "build/" to each original pattern as an anchor.
RELEVANT_FILE = $(builddir)/relevant.patterns
$(RELEVANT_FILE): $(PROJECTS) $(top_srcdir)/src/build-system/Makefile.meta.in
	@if test -n "$(PROJECTS)" -a -s "$(PROJECTS)"; then \
	    sed -e '/ update-only$$/d; /^$$/d; /^-/d; s@^@build/@' \
	        -e 's:\([^$$/\\]\)\(\$$*\)$$:\1/\2:' \
	      $(PROJECTS); \
	else \
	    echo '.*'; \
	fi > $(RELEVANT_FILE)

IRRELEVANT_FILE = $(builddir)/irrelevant.patterns
$(IRRELEVANT_FILE): $(PROJECTS) $(top_srcdir)/src/build-system/Makefile.meta.in
	@if test -n "$(PROJECTS)" ; then \
	    echo '# Dummy line to avoid empty file'; \
	    sed -ne 's:\([^$$/\\]\)\(\$$*\)$$:\1/\2:; s@^-@build/@p' \
	      $(PROJECTS); \
	else \
	    echo '^$$'; \
	fi > $(IRRELEVANT_FILE)

# Commands to see whether project directories are relevant.
RELEVANT = sed -e 's:$$:/:' | @EGREP@ -f $(RELEVANT_FILE) | \
    @EGREP_Q@ -v -f $(IRRELEVANT_FILE)
RELEVANT_DIR = pwd | $(RELEVANT)

RELEVANT_SUB_FILE = $(builddir)/relevant.prefixes
$(RELEVANT_SUB_FILE): $(RELEVANT_FILE)
	@while read path; do \
	    echo $$path; \
	    while [ "$$path" != build ]; do \
	        path=`dirname $$path` ; \
	        echo "$$path/\$$"; \
	    done; \
	done < $(RELEVANT_FILE) | sort -u > $(RELEVANT_SUB_FILE)

IRRELEVANT_SUB_FILE = $(builddir)/irrelevant.prefixes
$(IRRELEVANT_SUB_FILE): $(IRRELEVANT_FILE)
	@grep -v '\$$$$' $(IRRELEVANT_FILE) > $(IRRELEVANT_SUB_FILE)

RELEVANT_SUBS = pwd | sed -e 's:$$:/:' | @EGREP@ -f $(RELEVANT_SUB_FILE) | \
    @EGREP_Q@ -v -f $(IRRELEVANT_SUB_FILE)

SUB_BRA_P = \
if test -n "$(SUB_PROJ)"             -o  -n "$(POTENTIAL_SUB_PROJ)"  -o \
        -n "$(EXPENDABLE_SUB_PROJ)";  then \
    x_subproj="$(SUB_PROJ) $(POTENTIAL_SUB_PROJ) - $(EXPENDABLE_SUB_PROJ)"; \
    expendable=false ; \
    for i in $$x_subproj ; do \
        if test "x$$i" = "x-" ; then \
           expendable=true ; \
           NCBI_BUT_EXPENDABLE=' (but expendable)' ; \
           export NCBI_BUT_EXPENDABLE ; \
           continue ; \
        fi ; \
        ( if test -d $$i ; then \
          cd $$i  &&  if $(RELEVANT_DIR) || $(RELEVANT_SUBS) ; then \
          $(MAKE) $(MFLAGS_NR)

SUB_KET_P = ; else true ; fi $(SUB_KET)

all_p:       all_p.needs-reqs
clean_p:     clean_p.needs-reqs
purge_p:     purge_p.needs-reqs
check_p:     check_p.needs-reqs
check_add_p: check_add_p.needs-reqs
libs_p:      libs_p.needs-reqs

all_p.real: $(RELEVANT_SUB_FILE) $(IRRELEVANT_SUB_FILE)
	@-rm -f .built_r
	@-echo "`date`: starting to build in `pwd`" > .building
	@+if $(RELEVANT_DIR); then $(MAKE) $(MFLAGS_NR) all.real; else true; fi
	@+if $(RELEVANT_SUBS); then $(MAKE) $(MFLAGS_NR) configurables  &&  $(SUB_BRA_P) all_p $(SUB_KET_P); else true; fi
	@-rm -f .building
	@-echo "`date`: recursive build succeeded in `pwd`" > .built_r

clean_p.real: $(RELEVANT_SUB_FILE) $(IRRELEVANT_SUB_FILE)
	@if $(RELEVANT_DIR); then $(MAKE) $(MFLAGS_NR) clean.real; else true; fi
	@+if $(RELEVANT_SUBS); then $(SUB_BRA_P) clean_p $(SUB_KET_P); else true; fi

purge_p.real: $(RELEVANT_SUB_FILE) $(IRRELEVANT_SUB_FILE)
	@if $(RELEVANT_DIR); then $(MAKE) $(MFLAGS_NR) purge.real; else true; fi
	@+if $(RELEVANT_SUBS); then $(SUB_BRA_P) purge_p $(SUB_KET_P); else true; fi

check_p.real: $(RELEVANT_SUB_FILE) $(IRRELEVANT_SUB_FILE)
	@$(CHECK_BRA) check_add_p $(CHECK_KET)

check_add_p.real: $(RELEVANT_SUB_FILE) $(IRRELEVANT_SUB_FILE)
	@if $(RELEVANT_DIR); then $(CHECK_ADD_BRA) $(CHECK_ADD_KET); else true; fi
	@+if $(RELEVANT_SUBS); then $(SUB_BRA_P) check_add_p $(SUB_KET_P); else true; fi

libs_p.real: $(RELEVANT_SUB_FILE) $(IRRELEVANT_SUB_FILE)
	@if $(RELEVANT_DIR); then $(MAKE) $(MFLAGS_NR) libs; else true; fi
	@+if $(RELEVANT_SUBS); then $(SUB_BRA_P) libs_p $(SUB_KET_P); else true; fi

subdir = $(rel_srcdir:src/%=%)


Makefile.flat: $(builddir)/Makefile.flat
	+$(top_srcdir)/scripts/common/impl/create_flat_submakefile.sh \
	     $(builddir) $(subdir)
MAKE_FLAT = $(MAKE) $(MFLAGS_NR) -f Makefile.flat

# *_f targets build from local flat makefiles (produced on demand)
# that disregard dependencies beyond the current subtree.

all_f: Makefile.flat
	+$(MAKE_FLAT)
clean_f: Makefile.flat
	+$(MAKE_FLAT) MTARGET=clean
purge_f: Makefile.flat
	+$(MAKE_FLAT) MTARGET=purge
libs_f: Makefile.flat
	+$(MAKE_FLAT) all_libs
sources_f: Makefile.flat
	+$(MAKE_FLAT) all_files

# *_fd targets build the local subtree in parallel according to the
# top-level flat makefile, which may entail visiting dependencies
# beyond the current subtree.

all_fd:
	+cd $(builddir)  &&  $(MAKE_FLAT) $(subdir)/
clean_fd:
	+cd $(builddir)  &&  $(MAKE_FLAT) $(subdir)/ MTARGET=clean
purge_fd:
	+cd $(builddir)  &&  $(MAKE_FLAT) $(subdir)/ MTARGET=purge

configurables = @configurables_mfname@
include $(top_srcdir)/src/build-system/Makefile.$(configurables)

.PHONY: all        clean        purge        check        check_add
.PHONY: all.usr    clean.usr    purge.usr    sources.usr
.PHONY: all.nonusr clean.nonusr purge.nonusr sources.nonusr
.PHONY: all.real   clean.real   purge.real   check.real   check_add.real
.PHONY: all_r      clean_r      purge_r      check_r      check_add_r
.PHONY: all_r.real clean_r.real purge_r.real check_r.real check_add_r.real
.PHONY: all_p      clean_p      purge_p      check_p      check_add_p
.PHONY: all_p.real clean_p.real purge_p.real check_p.real check_add_p.real
.PHONY: all_f      clean_f      purge_f
.PHONY: all_fd     clean_fd     purge_fd
.PHONY: libs libs.real libs_r libs_r.real libs_p libs_p.real libs_f
.PHONY: sources sources_f clean_sources purge_sources
